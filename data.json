{
    "project": {
        "name": "Log.io",
        "url": "http://logio.org/",
        "version": "0.3.3",
        "description": "Realtime log monitoring in your browser"
    },
    "files": {
        "src/harvester.coffee": {
            "name": "src/harvester.coffee",
            "modules": {},
            "classes": {
                "LogHarvester": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/server.coffee": {
            "name": "src/server.coffee",
            "modules": {},
            "classes": {
                "LogStream": 1,
                "LogNode": 1,
                "LogServer": 1,
                "WebServer": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "LogStream": {
            "name": "LogStream",
            "shortname": "LogStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/server.coffee",
            "line": 49,
            "description": "Represents single log stream",
            "extends": "events.EventEmitter"
        },
        "LogHarvester": {
            "name": "LogHarvester",
            "shortname": "LogHarvester",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/harvester.coffee",
            "line": 95,
            "description": "`LogHarvester` creates `LogStream` for each file watched and opens a persistent TCP connection to the server.\n\nWatches local files and sends new log message to server via TCP.\n\nOn startup it announces itself as Node with Stream associations.\n\nLog messages are sent to the server via string-delimited TCP messages.\n\nSample configuration:\n\n    config =\n      nodeName: 'my_server01'\n      logStreams:\n        web_server: [\n          '/var/log/nginx/access.log',\n          '/var/log/nginx/error.log'\n        ],\n        customLogs: [\n          \"/var/log/myCustomLogs/\"\n        ],\n      server:\n        host: '0.0.0.0',\n        port: 28777\n\nConfiguration above sends the following TCP messages to the server:\n\n    \"+node|my_server01|web_server\\r\\n\"\n    \"+bind|node|my_server01\\r\\n\"\n    \"+log|web_server|my_server01|info|this is log messages\\r\\n\"\n\nUsage:\n\n    harvester = new LogHarvester config\n    harvester.run()"
        },
        "LogNode": {
            "name": "LogNode",
            "shortname": "LogNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/server.coffee",
            "line": 38,
            "description": "Represents single log node",
            "extends": "_LogObject"
        },
        "LogServer": {
            "name": "LogServer",
            "shortname": "LogServer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/server.coffee",
            "line": 60,
            "description": "`LogServer` listens for TCP connections. It parses & validates inbound TCP messages, and emits events.\n\nRelays inbound log messages to web clients\n\n`LogServer` receives log messages via TCP:\n\n    \"+log|my_stream|my_server_host|info|this is a log message\\r\\n\"\n\nAnnounce a node, optionally with stream associations\n\n    \"+node|my_server_host\\r\\n\"\n    \"+node|my_server_host|my_stream1,my_stream2,my_stream3\\r\\n\"\n\nAnnounce a stream, optionally with node associations\n\n    \"+stream|my_stream1\\r\\n\"\n    \"+stream|my_stream1|my_server_host1,my_host_server2\\r\\n\"\n\nRemove a node or stream\n\n    \"-node|my_server_host1\\r\\n\"\n    \"-stream|stream2\\r\\n\"\n\nWebServer listens for events emitted by `LogServer` and forwards them to web clients via socket.io\n\nUsage:\n\n    logServer = new LogServer port: 28777\n    webServer = new WebServer logServer, port: 28778\n    webServer.run()",
            "extends": "events.EventEmitter"
        },
        "WebServer": {
            "name": "WebServer",
            "shortname": "WebServer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/server.coffee",
            "line": 260,
            "description": "WebServer relays LogServe`r` events to web clients via socket.io."
        }
    },
    "classitems": [
        {
            "file": "src/harvester.coffee",
            "line": 18,
            "description": "Initializing new `LogStream` instance",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "name of current log stream. Only used for debugging.",
                    "type": "Object"
                },
                {
                    "name": "paths",
                    "description": "Array of local files paths.",
                    "type": "Object"
                },
                {
                    "name": "_log",
                    "description": "Winston (or compatible) logger object. Only used for debugging.",
                    "type": "Object"
                }
            ],
            "class": "LogStream"
        },
        {
            "file": "src/harvester.coffee",
            "line": 27,
            "description": "Initialising all file watching",
            "itemtype": "method",
            "name": "watch",
            "class": "LogStream"
        },
        {
            "file": "src/harvester.coffee",
            "line": 36,
            "description": "Watching all files under specified directory",
            "itemtype": "method",
            "name": "watch",
            "params": [
                {
                    "name": "path",
                    "description": "Path to directory",
                    "type": "String"
                }
            ],
            "class": "LogStream"
        },
        {
            "file": "src/harvester.coffee",
            "line": 46,
            "description": "Starting to watch file changes.",
            "itemtype": "method",
            "name": "watch",
            "params": [
                {
                    "name": "path",
                    "description": "Path to file or a directory",
                    "type": "String"
                }
            ],
            "class": "LogStream"
        },
        {
            "file": "src/harvester.coffee",
            "line": 77,
            "description": "File change has been detected. Determining what has been changed and emitting `new_log` event.",
            "itemtype": "method",
            "name": "watch",
            "params": [
                {
                    "name": "path",
                    "description": "Path to file or a directory",
                    "type": "String"
                }
            ],
            "class": "LogStream"
        },
        {
            "file": "src/harvester.coffee",
            "line": 135,
            "description": "Initializing new `LogHarvester` instance",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "harvester configuration",
                    "type": "Object"
                }
            ],
            "class": "LogHarvester"
        },
        {
            "file": "src/harvester.coffee",
            "line": 146,
            "description": "Run harvester and connect to server",
            "itemtype": "method",
            "name": "run",
            "class": "LogHarvester"
        },
        {
            "file": "src/harvester.coffee",
            "line": 156,
            "description": "Creating TCP socket",
            "itemtype": "method",
            "name": "_connect",
            "class": "LogHarvester"
        },
        {
            "file": "src/harvester.coffee",
            "line": 171,
            "description": "Creating TCP socket",
            "itemtype": "method",
            "name": "_sendLog",
            "params": [
                {
                    "name": "stream",
                    "description": "Stream that message is received from",
                    "type": "Object"
                },
                {
                    "name": "msg",
                    "description": "Log message body",
                    "type": "String"
                }
            ],
            "class": "LogHarvester"
        },
        {
            "file": "src/harvester.coffee",
            "line": 181,
            "description": "Registed harvester to server",
            "itemtype": "method",
            "name": "_announce",
            "class": "LogHarvester"
        },
        {
            "file": "src/harvester.coffee",
            "line": 191,
            "description": "Writing message directly to socket",
            "itemtype": "method",
            "name": "_send",
            "params": [
                {
                    "name": "mtype",
                    "description": "Message type",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Array of message strings",
                    "type": "Object"
                }
            ],
            "class": "LogHarvester"
        },
        {
            "file": "src/server.coffee",
            "line": 97,
            "description": "Initializing new `LogServer` instance",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "server properties",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "class": "LogServer"
        },
        {
            "file": "src/server.coffee",
            "line": 109,
            "description": "Run the server. Creates TCP listener socket and handle client disconnection",
            "itemtype": "method",
            "name": "run",
            "class": "LogServer"
        },
        {
            "file": "src/server.coffee",
            "line": 130,
            "description": "Receiving raw data from socket",
            "itemtype": "method",
            "name": "_receive",
            "params": [
                {
                    "name": "data",
                    "description": "raw data that was received from a socket",
                    "type": "Object"
                },
                {
                    "name": "socket",
                    "description": "source socket",
                    "type": "Object"
                }
            ],
            "class": "LogServer"
        },
        {
            "file": "src/server.coffee",
            "line": 142,
            "description": "Parse socket buffer to separate messages",
            "itemtype": "method",
            "name": "_flush",
            "params": [
                {
                    "name": "socket",
                    "description": "source socket",
                    "type": "Object"
                }
            ],
            "class": "LogServer"
        },
        {
            "file": "src/server.coffee",
            "line": 153,
            "description": "Determining how to handle individual messages",
            "itemtype": "method",
            "name": "_handle",
            "params": [
                {
                    "name": "socket",
                    "description": "source socket",
                    "type": "Object"
                },
                {
                    "name": "msg",
                    "description": "unparsed message string",
                    "type": "String"
                }
            ],
            "class": "LogServer"
        },
        {
            "file": "src/server.coffee",
            "line": 171,
            "description": "Handling new log message",
            "itemtype": "method",
            "name": "_newLog",
            "params": [
                {
                    "name": "sname",
                    "description": "name of the stream that message was received from",
                    "type": "String"
                },
                {
                    "name": "nname",
                    "description": "name of the node that message was received from",
                    "type": "String"
                },
                {
                    "name": "logLevel",
                    "description": "level of log",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "parsed message string",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "["
                }
            ],
            "class": "LogServer"
        },
        {
            "file": "src/server.coffee",
            "line": 186,
            "description": "Handling add node message",
            "itemtype": "method",
            "name": "_addNode",
            "params": [
                {
                    "name": "nname",
                    "description": "name of node to add",
                    "type": "String"
                },
                {
                    "name": "snames",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "''"
                }
            ],
            "class": "LogServer"
        },
        {
            "file": "src/server.coffee",
            "line": 195,
            "description": "Handling remove node message",
            "itemtype": "method",
            "name": "_removeNode",
            "params": [
                {
                    "name": "nname",
                    "description": "name of node to remove",
                    "type": "String"
                }
            ],
            "class": "LogServer"
        },
        {
            "file": "src/server.coffee",
            "line": 203,
            "description": "Handling add stream message",
            "itemtype": "method",
            "name": "_addStream",
            "params": [
                {
                    "name": "sname",
                    "description": "name of stream to add",
                    "type": "String"
                },
                {
                    "name": "nnames",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "''"
                }
            ],
            "class": "LogServer"
        },
        {
            "file": "src/server.coffee",
            "line": 212,
            "description": "Handling remove stream message",
            "itemtype": "method",
            "name": "_removeStream",
            "params": [
                {
                    "name": "sname",
                    "description": "name of stream to remove",
                    "type": "String"
                }
            ],
            "class": "LogServer"
        },
        {
            "file": "src/server.coffee",
            "line": 220,
            "description": "Adding node or a stream",
            "itemtype": "method",
            "name": "__add",
            "params": [
                {
                    "name": "name",
                    "description": "name of node or stream that will be added",
                    "type": "String"
                },
                {
                    "name": "pnames",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_collection",
                    "description": "hash to add new object to. Could be `logNodes` or `logStreams`",
                    "type": "Object"
                },
                {
                    "name": "_objClass",
                    "description": "class of object to create. Could be `logNode` or `logStream`.",
                    "type": "Object"
                },
                {
                    "name": "objType",
                    "description": "type of object as a string. Only used to console output.",
                    "type": "String"
                }
            ],
            "class": "LogServer"
        },
        {
            "file": "src/server.coffee",
            "line": 235,
            "description": "Removing node or a stream",
            "itemtype": "method",
            "name": "__add",
            "params": [
                {
                    "name": "name",
                    "description": "name of node or stream that will be removed",
                    "type": "String"
                },
                {
                    "name": "_collection",
                    "description": "hash to remove new object from. Could be `logNodes` or `logStreams`",
                    "type": "Object"
                },
                {
                    "name": "objType",
                    "description": "type of object as a string. Only used to console output.",
                    "type": "String"
                }
            ],
            "class": "LogServer"
        },
        {
            "file": "src/server.coffee",
            "line": 248,
            "description": "Binding node to TCP socket",
            "itemtype": "method",
            "name": "_bindNode",
            "params": [
                {
                    "name": "socket",
                    "description": "socket to bind node to",
                    "type": "Object"
                },
                {
                    "name": "obj",
                    "description": "(not used)",
                    "type": "Object"
                },
                {
                    "name": "nname",
                    "description": "name of node. Only used to console output.",
                    "type": "String"
                }
            ],
            "class": "LogServer"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nInitializing new `LogStream` instance",
            "line": " src/harvester.coffee:18"
        },
        {
            "message": "Missing item type\nInitializing new `LogHarvester` instance",
            "line": " src/harvester.coffee:135"
        },
        {
            "message": "Missing item type\nInitializing new `LogServer` instance",
            "line": " src/server.coffee:97"
        }
    ]
}